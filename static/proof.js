// deno-fmt-ignore
const wasmCode = new Uint8Array([
  0,  97, 115, 109,   1,   0,   0,   0,   1,  16,   3,  96,   2, 127, 127,   0,
 96,   3, 127, 127, 127,   0,  96,   1, 127,   0,   3,   5,   4,   0,   1,   2,
  2,   5,   5,   1,   1,  10, 232,   7,   7,  77,   5,   6, 109, 101, 109, 111,
114, 121,   2,   0,  12,  98, 108,  97, 107, 101,  50,  98,  95, 105, 110, 105,
116,   0,   0,  14,  98, 108,  97, 107, 101,  50,  98,  95, 117, 112, 100,  97,
116, 101,   0,   1,  13,  98, 108,  97, 107, 101,  50,  98,  95, 102, 105, 110,
 97, 108,   0,   2,  16,  98, 108,  97, 107, 101,  50,  98,  95,  99, 111, 109,
112, 114, 101, 115, 115,   0,   3,  10, 191,  63,   4, 192,   2,   0,  32,   0,
 66,   0,  55,   3,   0,  32,   0,  66,   0,  55,   3,   8,  32,   0,  66,   0,
 55,   3,  16,  32,   0,  66,   0,  55,   3,  24,  32,   0,  66,   0,  55,   3,
 32,  32,   0,  66,   0,  55,   3,  40,  32,   0,  66,   0,  55,   3,  48,  32,
  0,  66,   0,  55,   3,  56,  32,   0,  66,   0,  55,   3,  64,  32,   0,  66,
  0,  55,   3,  72,  32,   0,  66,   0,  55,   3,  80,  32,   0,  66,   0,  55,
  3,  88,  32,   0,  66,   0,  55,   3,  96,  32,   0,  66,   0,  55,   3, 104,
 32,   0,  66,   0,  55,   3, 112,  32,   0,  66,   0,  55,   3, 120,  32,   0,
 66, 136, 146, 243, 157, 255, 204, 249, 132, 234,   0,  65,   0,  41,   3,   0,
133,  55,   3, 128,   1,  32,   0,  66, 187, 206, 170, 166, 216, 208, 235, 179,
187, 127,  65,   8,  41,   3,   0, 133,  55,   3, 136,   1,  32,   0,  66, 171,
240, 211, 244, 175, 238, 188, 183,  60,  65,  16,  41,   3,   0, 133,  55,   3,
144,   1,  32,   0,  66, 241, 237, 244, 248, 165, 167, 253, 167, 165, 127,  65,
 24,  41,   3,   0, 133,  55,   3, 152,   1,  32,   0,  66, 209, 133, 154, 239,
250, 207, 148, 135, 209,   0,  65,  32,  41,   3,   0, 133,  55,   3, 160,   1,
 32,   0,  66, 159, 216, 249, 217, 194, 145, 218, 130, 155, 127,  65,  40,  41,
  3,   0, 133,  55,   3, 168,   1,  32,   0,  66, 235, 250, 134, 218, 191, 181,
246, 193,  31,  65,  48,  41,   3,   0, 133,  55,   3, 176,   1,  32,   0,  66,
249, 194, 248, 155, 145, 163, 179, 240, 219,   0,  65,  56,  41,   3,   0, 133,
 55,   3, 184,   1,  32,   0,  66,   0,  55,   3, 192,   1,  32,   0,  66,   0,
 55,   3, 200,   1,  32,   0,  66,   0,  55,   3, 208,   1,  11, 109,   1,   3,
127,  32,   0,  65, 192,   1, 106,  33,   3,  32,   0,  65, 200,   1, 106,  33,
  4,  32,   4,  41,   3,   0, 167,  33,   5,   2,  64,   3,  64,  32,   1,  32,
  2,  70,  13,   1,  32,   5,  65, 128,   1,  70,   4,  64,  32,   3,  32,   3,
 41,   3,   0,  32,   5, 173, 124,  55,   3,   0,  65,   0,  33,   5,  32,   0,
 16,   3,  11,  32,   0,  32,   5, 106,  32,   1,  45,   0,   0,  58,   0,   0,
 32,   5,  65,   1, 106,  33,   5,  32,   1,  65,   1, 106,  33,   1,  12,   0,
 11,  11,  32,   4,  32,   5, 173,  55,   3,   0,  11,  97,   1,   3, 127,  32,
  0,  65, 192,   1, 106,  33,   1,  32,   0,  65, 200,   1, 106,  33,   2,  32,
  1,  32,   1,  41,   3,   0,  32,   2,  41,   3,   0, 124,  55,   3,   0,  32,
  0,  66, 127,  55,   3, 208,   1,  32,   2,  41,   3,   0, 167,  33,   3,   2,
 64,   3,  64,  32,   3,  65, 128,   1,  70,  13,   1,  32,   0,  32,   3, 106,
 65,   0,  58,   0,   0,  32,   3,  65,   1, 106,  33,   3,  12,   0,  11,  11,
 32,   2,  32,   3, 173,  55,   3,   0,  32,   0,  16,   3,  11, 170,  59,   2,
 32, 126,   9, 127,  32,   0,  65, 128,   1, 106,  33,  33,  32,   0,  65, 136,
  1, 106,  33,  34,  32,   0,  65, 144,   1, 106,  33,  35,  32,   0,  65, 152,
  1, 106,  33,  36,  32,   0,  65, 160,   1, 106,  33,  37,  32,   0,  65, 168,
  1, 106,  33,  38,  32,   0,  65, 176,   1, 106,  33,  39,  32,   0,  65, 184,
  1, 106,  33,  40,  32,  33,  41,   3,   0,  33,   1,  32,  34,  41,   3,   0,
 33,   2,  32,  35,  41,   3,   0,  33,   3,  32,  36,  41,   3,   0,  33,   4,
 32,  37,  41,   3,   0,  33,   5,  32,  38,  41,   3,   0,  33,   6,  32,  39,
 41,   3,   0,  33,   7,  32,  40,  41,   3,   0,  33,   8,  66, 136, 146, 243,
157, 255, 204, 249, 132, 234,   0,  33,   9,  66, 187, 206, 170, 166, 216, 208,
235, 179, 187, 127,  33,  10,  66, 171, 240, 211, 244, 175, 238, 188, 183,  60,
 33,  11,  66, 241, 237, 244, 248, 165, 167, 253, 167, 165, 127,  33,  12,  66,
209, 133, 154, 239, 250, 207, 148, 135, 209,   0,  33,  13,  66, 159, 216, 249,
217, 194, 145, 218, 130, 155, 127,  33,  14,  66, 235, 250, 134, 218, 191, 181,
246, 193,  31,  33,  15,  66, 249, 194, 248, 155, 145, 163, 179, 240, 219,   0,
 33,  16,  32,   0,  41,   3,   0,  33,  17,  32,   0,  41,   3,   8,  33,  18,
 32,   0,  41,   3,  16,  33,  19,  32,   0,  41,   3,  24,  33,  20,  32,   0,
 41,   3,  32,  33,  21,  32,   0,  41,   3,  40,  33,  22,  32,   0,  41,   3,
 48,  33,  23,  32,   0,  41,   3,  56,  33,  24,  32,   0,  41,   3,  64,  33,
 25,  32,   0,  41,   3,  72,  33,  26,  32,   0,  41,   3,  80,  33,  27,  32,
  0,  41,   3,  88,  33,  28,  32,   0,  41,   3,  96,  33,  29,  32,   0,  41,
  3, 104,  33,  30,  32,   0,  41,   3, 112,  33,  31,  32,   0,  41,   3, 120,
 33,  32,  32,  13,  32,   0,  41,   3, 192,   1, 133,  33,  13,  32,  15,  32,
  0,  41,   3, 208,   1, 133,  33,  15,  32,   1,  32,   5,  32,  17, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  18, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  19, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  20, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  21, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  22, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  23, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 24, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  25, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  26, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  27,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  28, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  29, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  30, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  31, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  32, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  31, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  27, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  21, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  25, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  26, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  32, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  30, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 23, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  18, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  29, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  17,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  19, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  28, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  24, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  22, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  20, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  28, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  25, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  29, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  17, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  22, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  19, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  32, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 30, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  27, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  31, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  20,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  23, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  24, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  18, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  26, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  21, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  24, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  26, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  20, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  18, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  30, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  29, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  28, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 31, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  19, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  23, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  22,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  27, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  21, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  17, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  32, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  25, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  26, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  17, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  22, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  24, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  19, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  21, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  27, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 32, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  31, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  18, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  28,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  29, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  23, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  25, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  20, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  30, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  19, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  29, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  23, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  27, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  17, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  28, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  25, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 20, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  21, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  30, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  24,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  22, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  32, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  31, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  18, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  26, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  29, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  22, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  18, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  32, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  31, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  30, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  21, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 27, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  17, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  24, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  23,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  20, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  26, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  19, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  25, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  28, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  30, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  28, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  24, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  31, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  29, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  18, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  20, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 26, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  22, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  17, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  32,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  21, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  25, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  23, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  19, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  27, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  23, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  32, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  31, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  26, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  28, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  20, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  17, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 25, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  29, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  19, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  30,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  24, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  18, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  21, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  27, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  22, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  27, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  19, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  25, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  21, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  24, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  23, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  18, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 22, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  32, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  28, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  26,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  31, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  20, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  29, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  30, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  17, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  17, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  18, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  19, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  20, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  21, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  22, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  23, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 24, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  25, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  26, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  27,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  28, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  29, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  30, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  31, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  32, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,   1,  32,   5,  32,  31, 124, 124,
 33,   1,  32,  13,  32,   1, 133,  66,  32, 138,  33,  13,  32,   9,  32,  13,
124,  33,   9,  32,   5,  32,   9, 133,  66,  24, 138,  33,   5,  32,   1,  32,
  5,  32,  27, 124, 124,  33,   1,  32,  13,  32,   1, 133,  66,  16, 138,  33,
 13,  32,   9,  32,  13, 124,  33,   9,  32,   5,  32,   9, 133,  66,  63, 138,
 33,   5,  32,   2,  32,   6,  32,  21, 124, 124,  33,   2,  32,  14,  32,   2,
133,  66,  32, 138,  33,  14,  32,  10,  32,  14, 124,  33,  10,  32,   6,  32,
 10, 133,  66,  24, 138,  33,   6,  32,   2,  32,   6,  32,  25, 124, 124,  33,
  2,  32,  14,  32,   2, 133,  66,  16, 138,  33,  14,  32,  10,  32,  14, 124,
 33,  10,  32,   6,  32,  10, 133,  66,  63, 138,  33,   6,  32,   3,  32,   7,
 32,  26, 124, 124,  33,   3,  32,  15,  32,   3, 133,  66,  32, 138,  33,  15,
 32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11, 133,  66,  24, 138,  33,
  7,  32,   3,  32,   7,  32,  32, 124, 124,  33,   3,  32,  15,  32,   3, 133,
 66,  16, 138,  33,  15,  32,  11,  32,  15, 124,  33,  11,  32,   7,  32,  11,
133,  66,  63, 138,  33,   7,  32,   4,  32,   8,  32,  30, 124, 124,  33,   4,
 32,  16,  32,   4, 133,  66,  32, 138,  33,  16,  32,  12,  32,  16, 124,  33,
 12,  32,   8,  32,  12, 133,  66,  24, 138,  33,   8,  32,   4,  32,   8,  32,
 23, 124, 124,  33,   4,  32,  16,  32,   4, 133,  66,  16, 138,  33,  16,  32,
 12,  32,  16, 124,  33,  12,  32,   8,  32,  12, 133,  66,  63, 138,  33,   8,
 32,   1,  32,   6,  32,  18, 124, 124,  33,   1,  32,  16,  32,   1, 133,  66,
 32, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,  32,   6,  32,  11, 133,
 66,  24, 138,  33,   6,  32,   1,  32,   6,  32,  29, 124, 124,  33,   1,  32,
 16,  32,   1, 133,  66,  16, 138,  33,  16,  32,  11,  32,  16, 124,  33,  11,
 32,   6,  32,  11, 133,  66,  63, 138,  33,   6,  32,   2,  32,   7,  32,  17,
124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  32, 138,  33,  13,  32,  12,
 32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,  24, 138,  33,   7,  32,
  2,  32,   7,  32,  19, 124, 124,  33,   2,  32,  13,  32,   2, 133,  66,  16,
138,  33,  13,  32,  12,  32,  13, 124,  33,  12,  32,   7,  32,  12, 133,  66,
 63, 138,  33,   7,  32,   3,  32,   8,  32,  28, 124, 124,  33,   3,  32,  14,
 32,   3, 133,  66,  32, 138,  33,  14,  32,   9,  32,  14, 124,  33,   9,  32,
  8,  32,   9, 133,  66,  24, 138,  33,   8,  32,   3,  32,   8,  32,  24, 124,
124,  33,   3,  32,  14,  32,   3, 133,  66,  16, 138,  33,  14,  32,   9,  32,
 14, 124,  33,   9,  32,   8,  32,   9, 133,  66,  63, 138,  33,   8,  32,   4,
 32,   5,  32,  22, 124, 124,  33,   4,  32,  15,  32,   4, 133,  66,  32, 138,
 33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,  32,  10, 133,  66,  24,
138,  33,   5,  32,   4,  32,   5,  32,  20, 124, 124,  33,   4,  32,  15,  32,
  4, 133,  66,  16, 138,  33,  15,  32,  10,  32,  15, 124,  33,  10,  32,   5,
 32,  10, 133,  66,  63, 138,  33,   5,  32,  33,  32,  33,  41,   3,   0,  32,
  1,  32,   9, 133, 133,  55,   3,   0,  32,  34,  32,  34,  41,   3,   0,  32,
  2,  32,  10, 133, 133,  55,   3,   0,  32,  35,  32,  35,  41,   3,   0,  32,
  3,  32,  11, 133, 133,  55,   3,   0,  32,  36,  32,  36,  41,   3,   0,  32,
  4,  32,  12, 133, 133,  55,   3,   0,  32,  37,  32,  37,  41,   3,   0,  32,
  5,  32,  13, 133, 133,  55,   3,   0,  32,  38,  32,  38,  41,   3,   0,  32,
  6,  32,  14, 133, 133,  55,   3,   0,  32,  39,  32,  39,  41,   3,   0,  32,
  7,  32,  15, 133, 133,  55,   3,   0,  32,  40,  32,  40,  41,   3,   0,  32,
  8,  32,  16, 133, 133,  55,   3,   0,  11,
]);
let instance;
let instanceMemory;
let memory;
let blake2bInit;
let blake2bUpdate;
let blake2bFinal;
void async function () {
  instance = (await WebAssembly.instantiate(wasmCode)).instance;
  instanceMemory = instance.exports.memory;
  memory = new Uint8Array(instanceMemory.buffer);
  blake2bInit = instance.exports["blake2b_init"];
  blake2bUpdate = instance.exports["blake2b_update"];
  blake2bFinal = instance.exports["blake2b_final"];
}();
let head = 64;
const freeList = [];
const STATE_SIZE = 216;
const PAGE_SIZE = 65536;
function getPointer() {
  if (head + STATE_SIZE > memory.length) {
    growMemory(head + STATE_SIZE);
  }
  if (!freeList.length) {
    freeList.push(head);
    head += 216;
  }
  return freeList.pop();
}
function growMemory(size) {
  const pages = Math.ceil(
    Math.abs(size - memory.length) / PAGE_SIZE,
  );
  instanceMemory.grow(pages);
  memory = new Uint8Array(instanceMemory.buffer);
}
class Blake2b {
  static MIN_DIGEST_BYTES = 1;
  static MAX_DIGEST_BYTES = 64;
  static MIN_KEY_BYTES = 1;
  static MAX_KEY_BYTES = 64;
  #finalized = false;
  #pointer = getPointer();
  get finalized() {
    return this.#finalized;
  }
  constructor(digestLength = 32, key) {
    if (!(digestLength >= Blake2b.MIN_DIGEST_BYTES)) {
      throw new Error(
        `digestLength must be at least ${Blake2b.MIN_DIGEST_BYTES}, was given ${digestLength}`,
      );
    }
    if (!(digestLength <= Blake2b.MAX_DIGEST_BYTES)) {
      throw new Error(
        `digestLength must be at most ${Blake2b.MAX_DIGEST_BYTES}, was given ${digestLength}`,
      );
    }
    if (key != undefined) {
      if (!(key.length >= Blake2b.MIN_KEY_BYTES)) {
        throw new Error(
          `key length must be at least ${Blake2b.MIN_KEY_BYTES}, was given key of length ${key.length}`,
        );
      }
      if (!(key.length <= Blake2b.MAX_KEY_BYTES)) {
        throw new Error(
          `key length must be at most ${Blake2b.MAX_KEY_BYTES}, was given key length of ${key.length}`,
        );
      }
    }
    this.digestLength = digestLength;
    memory.fill(0, 0, 64);
    memory.set([
      this.digestLength,
      key ? key.length : 0,
      1,
      1,
    ]);
    blake2bInit(this.#pointer, this.digestLength);
    if (key) {
      this.update(key);
      memory.fill(0, head, head + key.length);
      memory[this.#pointer + 200] = 128;
    }
  }
  update(input) {
    if (!(this.#finalized == false)) {
      throw new Error("Hash instance finalized");
    }
    if (head + input.length > memory.length) {
      growMemory(head + input.length);
    }
    memory.set(input, head);
    blake2bUpdate(this.#pointer, head, head + input.length);
    return this;
  }
  digest() {
    if (!(this.#finalized === false)) {
      throw new Error("Hash instance finalized");
    }
    this.#finalized = true;
    freeList.push(this.#pointer);
    blake2bFinal(this.#pointer);
    return memory.slice(
      this.#pointer + 128,
      this.#pointer + 128 + this.digestLength,
    );
  }
}
function blake2b(input, digestLength, key) {
  return new Blake2b(digestLength, key)
    .update(input)
    .digest();
}
const HEX_CHARS = "0123456789abcdef".split("");
const EXTRA = [-2147483648, 8388608, 32768, 128];
const SHIFT = [24, 16, 8, 0];
// deno-fmt-ignore
const K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,
  0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
  0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,
  0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
  0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
];
const blocks = [];
class Sha256 {
  #block;
  #blocks;
  #bytes;
  #finalized;
  #first;
  #h0;
  #h1;
  #h2;
  #h3;
  #h4;
  #h5;
  #h6;
  #h7;
  #hashed;
  #hBytes;
  #is224;
  #lastByteIndex = 0;
  #start;
  constructor(is224 = false, sharedMemory = false) {
    this.init(is224, sharedMemory);
  }
  init(is224, sharedMemory) {
    if (sharedMemory) {
      // deno-fmt-ignore
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.#blocks = blocks;
    } else {
      this.#blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (is224) {
      this.#h0 = 0xc1059ed8;
      this.#h1 = 0x367cd507;
      this.#h2 = 0x3070dd17;
      this.#h3 = 0xf70e5939;
      this.#h4 = 0xffc00b31;
      this.#h5 = 0x68581511;
      this.#h6 = 0x64f98fa7;
      this.#h7 = 0xbefa4fa4;
    } else {
      this.#h0 = 0x6a09e667;
      this.#h1 = 0xbb67ae85;
      this.#h2 = 0x3c6ef372;
      this.#h3 = 0xa54ff53a;
      this.#h4 = 0x510e527f;
      this.#h5 = 0x9b05688c;
      this.#h6 = 0x1f83d9ab;
      this.#h7 = 0x5be0cd19;
    }
    this.#block = this.#start = this.#bytes = this.#hBytes = 0;
    this.#finalized = this.#hashed = false;
    this.#first = true;
    this.#is224 = is224;
  }
  update(message) {
    if (this.#finalized) {
      return this;
    }
    let msg;
    if (message instanceof ArrayBuffer) {
      msg = new Uint8Array(message);
    } else {
      msg = message;
    }
    let index = 0;
    const length = msg.length;
    const blocks = this.#blocks;
    while (index < length) {
      let i;
      if (this.#hashed) {
        this.#hashed = false;
        blocks[0] = this.#block;
        // deno-fmt-ignore
        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }
      if (typeof msg !== "string") {
        for (i = this.#start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= msg[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.#start; index < length && i < 64; ++index) {
          let code = msg.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 +
              (((code & 0x3ff) << 10) | (msg.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.#lastByteIndex = i;
      this.#bytes += i - this.#start;
      if (i >= 64) {
        this.#block = blocks[16];
        this.#start = i - 64;
        this.hash();
        this.#hashed = true;
      } else {
        this.#start = i;
      }
    }
    if (this.#bytes > 4294967295) {
      this.#hBytes += (this.#bytes / 4294967296) << 0;
      this.#bytes = this.#bytes % 4294967296;
    }
    return this;
  }
  finalize() {
    if (this.#finalized) {
      return;
    }
    this.#finalized = true;
    const blocks = this.#blocks;
    const i = this.#lastByteIndex;
    blocks[16] = this.#block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.#block = blocks[16];
    if (i >= 56) {
      if (!this.#hashed) {
        this.hash();
      }
      blocks[0] = this.#block;
      // deno-fmt-ignore
      blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = (this.#hBytes << 3) | (this.#bytes >>> 29);
    blocks[15] = this.#bytes << 3;
    this.hash();
  }
  hash() {
    let a = this.#h0;
    let b = this.#h1;
    let c = this.#h2;
    let d = this.#h3;
    let e = this.#h4;
    let f = this.#h5;
    let g = this.#h6;
    let h = this.#h7;
    const blocks = this.#blocks;
    let s0;
    let s1;
    let maj;
    let t1;
    let t2;
    let ch;
    let ab;
    let da;
    let cd;
    let bc;
    for (let j = 16; j < 64; ++j) {
      t1 = blocks[j - 15];
      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
      t1 = blocks[j - 2];
      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^
        (t1 >>> 10);
      blocks[j] = (blocks[j - 16] + s0 + blocks[j - 7] + s1) << 0;
    }
    bc = b & c;
    for (let j = 0; j < 64; j += 4) {
      if (this.#first) {
        if (this.#is224) {
          ab = 300032;
          t1 = blocks[0] - 1413257819;
          h = (t1 - 150054599) << 0;
          d = (t1 + 24177077) << 0;
        } else {
          ab = 704751109;
          t1 = blocks[0] - 210244248;
          h = (t1 - 1521486534) << 0;
          d = (t1 + 143694565) << 0;
        }
        this.#first = false;
      } else {
        s0 = ((a >>> 2) | (a << 30)) ^
          ((a >>> 13) | (a << 19)) ^
          ((a >>> 22) | (a << 10));
        s1 = ((e >>> 6) | (e << 26)) ^
          ((e >>> 11) | (e << 21)) ^
          ((e >>> 25) | (e << 7));
        ab = a & b;
        maj = ab ^ (a & c) ^ bc;
        ch = (e & f) ^ (~e & g);
        t1 = h + s1 + ch + K[j] + blocks[j];
        t2 = s0 + maj;
        h = (d + t1) << 0;
        d = (t1 + t2) << 0;
      }
      s0 = ((d >>> 2) | (d << 30)) ^
        ((d >>> 13) | (d << 19)) ^
        ((d >>> 22) | (d << 10));
      s1 = ((h >>> 6) | (h << 26)) ^
        ((h >>> 11) | (h << 21)) ^
        ((h >>> 25) | (h << 7));
      da = d & a;
      maj = da ^ (d & b) ^ ab;
      ch = (h & e) ^ (~h & f);
      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
      t2 = s0 + maj;
      g = (c + t1) << 0;
      c = (t1 + t2) << 0;
      s0 = ((c >>> 2) | (c << 30)) ^
        ((c >>> 13) | (c << 19)) ^
        ((c >>> 22) | (c << 10));
      s1 = ((g >>> 6) | (g << 26)) ^
        ((g >>> 11) | (g << 21)) ^
        ((g >>> 25) | (g << 7));
      cd = c & d;
      maj = cd ^ (c & a) ^ da;
      ch = (g & h) ^ (~g & e);
      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
      t2 = s0 + maj;
      f = (b + t1) << 0;
      b = (t1 + t2) << 0;
      s0 = ((b >>> 2) | (b << 30)) ^
        ((b >>> 13) | (b << 19)) ^
        ((b >>> 22) | (b << 10));
      s1 = ((f >>> 6) | (f << 26)) ^
        ((f >>> 11) | (f << 21)) ^
        ((f >>> 25) | (f << 7));
      bc = b & c;
      maj = bc ^ (b & d) ^ cd;
      ch = (f & g) ^ (~f & h);
      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
      t2 = s0 + maj;
      e = (a + t1) << 0;
      a = (t1 + t2) << 0;
    }
    this.#h0 = (this.#h0 + a) << 0;
    this.#h1 = (this.#h1 + b) << 0;
    this.#h2 = (this.#h2 + c) << 0;
    this.#h3 = (this.#h3 + d) << 0;
    this.#h4 = (this.#h4 + e) << 0;
    this.#h5 = (this.#h5 + f) << 0;
    this.#h6 = (this.#h6 + g) << 0;
    this.#h7 = (this.#h7 + h) << 0;
  }
  hex() {
    this.finalize();
    const h0 = this.#h0;
    const h1 = this.#h1;
    const h2 = this.#h2;
    const h3 = this.#h3;
    const h4 = this.#h4;
    const h5 = this.#h5;
    const h6 = this.#h6;
    const h7 = this.#h7;
    let hex = HEX_CHARS[(h0 >> 28) & 0x0f] +
      HEX_CHARS[(h0 >> 24) & 0x0f] +
      HEX_CHARS[(h0 >> 20) & 0x0f] +
      HEX_CHARS[(h0 >> 16) & 0x0f] +
      HEX_CHARS[(h0 >> 12) & 0x0f] +
      HEX_CHARS[(h0 >> 8) & 0x0f] +
      HEX_CHARS[(h0 >> 4) & 0x0f] +
      HEX_CHARS[h0 & 0x0f] +
      HEX_CHARS[(h1 >> 28) & 0x0f] +
      HEX_CHARS[(h1 >> 24) & 0x0f] +
      HEX_CHARS[(h1 >> 20) & 0x0f] +
      HEX_CHARS[(h1 >> 16) & 0x0f] +
      HEX_CHARS[(h1 >> 12) & 0x0f] +
      HEX_CHARS[(h1 >> 8) & 0x0f] +
      HEX_CHARS[(h1 >> 4) & 0x0f] +
      HEX_CHARS[h1 & 0x0f] +
      HEX_CHARS[(h2 >> 28) & 0x0f] +
      HEX_CHARS[(h2 >> 24) & 0x0f] +
      HEX_CHARS[(h2 >> 20) & 0x0f] +
      HEX_CHARS[(h2 >> 16) & 0x0f] +
      HEX_CHARS[(h2 >> 12) & 0x0f] +
      HEX_CHARS[(h2 >> 8) & 0x0f] +
      HEX_CHARS[(h2 >> 4) & 0x0f] +
      HEX_CHARS[h2 & 0x0f] +
      HEX_CHARS[(h3 >> 28) & 0x0f] +
      HEX_CHARS[(h3 >> 24) & 0x0f] +
      HEX_CHARS[(h3 >> 20) & 0x0f] +
      HEX_CHARS[(h3 >> 16) & 0x0f] +
      HEX_CHARS[(h3 >> 12) & 0x0f] +
      HEX_CHARS[(h3 >> 8) & 0x0f] +
      HEX_CHARS[(h3 >> 4) & 0x0f] +
      HEX_CHARS[h3 & 0x0f] +
      HEX_CHARS[(h4 >> 28) & 0x0f] +
      HEX_CHARS[(h4 >> 24) & 0x0f] +
      HEX_CHARS[(h4 >> 20) & 0x0f] +
      HEX_CHARS[(h4 >> 16) & 0x0f] +
      HEX_CHARS[(h4 >> 12) & 0x0f] +
      HEX_CHARS[(h4 >> 8) & 0x0f] +
      HEX_CHARS[(h4 >> 4) & 0x0f] +
      HEX_CHARS[h4 & 0x0f] +
      HEX_CHARS[(h5 >> 28) & 0x0f] +
      HEX_CHARS[(h5 >> 24) & 0x0f] +
      HEX_CHARS[(h5 >> 20) & 0x0f] +
      HEX_CHARS[(h5 >> 16) & 0x0f] +
      HEX_CHARS[(h5 >> 12) & 0x0f] +
      HEX_CHARS[(h5 >> 8) & 0x0f] +
      HEX_CHARS[(h5 >> 4) & 0x0f] +
      HEX_CHARS[h5 & 0x0f] +
      HEX_CHARS[(h6 >> 28) & 0x0f] +
      HEX_CHARS[(h6 >> 24) & 0x0f] +
      HEX_CHARS[(h6 >> 20) & 0x0f] +
      HEX_CHARS[(h6 >> 16) & 0x0f] +
      HEX_CHARS[(h6 >> 12) & 0x0f] +
      HEX_CHARS[(h6 >> 8) & 0x0f] +
      HEX_CHARS[(h6 >> 4) & 0x0f] +
      HEX_CHARS[h6 & 0x0f];
    if (!this.#is224) {
      hex += HEX_CHARS[(h7 >> 28) & 0x0f] +
        HEX_CHARS[(h7 >> 24) & 0x0f] +
        HEX_CHARS[(h7 >> 20) & 0x0f] +
        HEX_CHARS[(h7 >> 16) & 0x0f] +
        HEX_CHARS[(h7 >> 12) & 0x0f] +
        HEX_CHARS[(h7 >> 8) & 0x0f] +
        HEX_CHARS[(h7 >> 4) & 0x0f] +
        HEX_CHARS[h7 & 0x0f];
    }
    return hex;
  }
  toString() {
    return this.hex();
  }
  digest() {
    this.finalize();
    const h0 = this.#h0;
    const h1 = this.#h1;
    const h2 = this.#h2;
    const h3 = this.#h3;
    const h4 = this.#h4;
    const h5 = this.#h5;
    const h6 = this.#h6;
    const h7 = this.#h7;
    const arr = [
      (h0 >> 24) & 0xff,
      (h0 >> 16) & 0xff,
      (h0 >> 8) & 0xff,
      h0 & 0xff,
      (h1 >> 24) & 0xff,
      (h1 >> 16) & 0xff,
      (h1 >> 8) & 0xff,
      h1 & 0xff,
      (h2 >> 24) & 0xff,
      (h2 >> 16) & 0xff,
      (h2 >> 8) & 0xff,
      h2 & 0xff,
      (h3 >> 24) & 0xff,
      (h3 >> 16) & 0xff,
      (h3 >> 8) & 0xff,
      h3 & 0xff,
      (h4 >> 24) & 0xff,
      (h4 >> 16) & 0xff,
      (h4 >> 8) & 0xff,
      h4 & 0xff,
      (h5 >> 24) & 0xff,
      (h5 >> 16) & 0xff,
      (h5 >> 8) & 0xff,
      h5 & 0xff,
      (h6 >> 24) & 0xff,
      (h6 >> 16) & 0xff,
      (h6 >> 8) & 0xff,
      h6 & 0xff,
    ];
    if (!this.#is224) {
      arr.push(
        (h7 >> 24) & 0xff,
        (h7 >> 16) & 0xff,
        (h7 >> 8) & 0xff,
        h7 & 0xff,
      );
    }
    return arr;
  }
  array() {
    return this.digest();
  }
  arrayBuffer() {
    this.finalize();
    const buffer = new ArrayBuffer(this.#is224 ? 28 : 32);
    const dataView = new DataView(buffer);
    dataView.setUint32(0, this.#h0);
    dataView.setUint32(4, this.#h1);
    dataView.setUint32(8, this.#h2);
    dataView.setUint32(12, this.#h3);
    dataView.setUint32(16, this.#h4);
    dataView.setUint32(20, this.#h5);
    dataView.setUint32(24, this.#h6);
    if (!this.#is224) {
      dataView.setUint32(28, this.#h7);
    }
    return buffer;
  }
}
function compare(a, b) {
  if (a.length != b.length) {
    return false;
  }
  for (const index in a) {
    if (a[index] != b[index]) {
      return false;
    }
  }
  return true;
}
function concat(...chunks) {
  let size = 0;
  for (const piece of chunks) {
    size += piece instanceof Uint8Array ? piece.length : 1;
  }
  const result = new Uint8Array(size);
  let cursor = 0;
  for (const piece of chunks) {
    if (piece instanceof Uint8Array) {
      result.set(piece, cursor);
      cursor += piece.length;
    } else {
      result[cursor] = piece;
      cursor++;
    }
  }
  return result;
}
function sha256(bytes) {
  const digest = new Sha256()
    .update(bytes)
    .digest();
  return new Uint8Array(digest);
}
const Base58 = {
  ALPHABET: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  validator: /^[1-9A-HJ-NP-Za-km-z]*$/,
  encode(bytes) {
    if (bytes.length == 0) {
      return "";
    }
    const int = BigInt("0x" + Hex.stringify(bytes));
    let encoding = "";
    for (let n = int; n > 0n; n /= 58n) {
      const mod = Number(n % 58n);
      encoding = Base58.ALPHABET[mod] + encoding;
    }
    for (let i = 0; bytes[i] == 0; ++i) {
      encoding = Base58.ALPHABET[0] + encoding;
    }
    return encoding;
  },
  decode(input) {
    if (!Base58.validator.test(input)) {
      throw new SyntaxError(`Invalid Base58 string`);
    }
    if (input.length == 0) {
      return new Uint8Array([]);
    }
    let int = 0n;
    for (const char of input) {
      const index = Base58.ALPHABET.indexOf(char);
      int = int * 58n + BigInt(index);
    }
    const bytes = [];
    for (let n = int; n > 0n; n /= 256n) {
      bytes.push(Number(n % 256n));
    }
    for (let i = 0; input[i] == Base58.ALPHABET[0]; ++i) {
      bytes.push(0);
    }
    return new Uint8Array(bytes.reverse());
  },
  encodeCheck(bytes) {
    const checksum = sha256(sha256(bytes)).slice(0, 4);
    return Base58.encode(concat(bytes, checksum));
  },
  decodeCheck(input) {
    const bytes = Base58.decode(input);
    const payload = bytes.slice(0, -4);
    const checksum = sha256(sha256(payload)).slice(0, 4);
    if (!compare(checksum, bytes.slice(-4))) {
      throw new Error("Base58 checksum did not match");
    }
    return payload;
  }
};
const Hex = {
  validator: /^[0-9a-fA-F]+$/,
  parse() {
    if (input.length == 0) {
      return new Uint8Array([]);
    }
    if (!Hex.validator.test(input)) {
      throw new SyntaxError("Invalid hexidecimal string");
    }
    const byteCount = Math.ceil(input.length / 2);
    const bytes = new Uint8Array(byteCount);
    for (let index = 0; index < input.length / 2; ++index) {
      const offset = index * 2 - input.length % 2;
      const hexByte = input.substring(offset, offset + 2);
      bytes[index] = parseInt(hexByte, 16);
    }
    return bytes;
  },
};
export class Block {
  static PREFIX = new Uint8Array([1, 52]);
  constructor(network, hash) {
    this.network = network;
    this.hash = hash;
  }
  get address() {
    const prefixedHash = concat(Block.PREFIX, this.hash);
    return Base58.encodeCheck(prefixedHash);
  }
  async lookup(rpcURL) {
    const endpoint = new URL(
      `/chains/${this.network}/blocks/${this.address}/header`,
      rpcURL,
    );
    const response = await fetch(endpoint);
    if (!response.ok) {
      throw new Error(`Server responsed with status ${response.status}`);
    }
    const header = await response.json();
    return new Date(header.timestamp);
  }
}
const blake2bHash = blake2b;
export const Operation = {
  prepend: (data) => ({
    toString: () => `Prepend ${Hex.stringify(data)}`,
    toJSON: () => ["prepend", Hex.stringify(data)],
    commit: (input) => concat(data, input),
  }),
  append: (data) => ({
    toString: () => `Append ${Hex.stringify(data)}`,
    toJSON: () => ["append", Hex.stringify(data)],
    commit: (input) => concat(input, data),
  }),
  sha256: () => ({
    toString: () => "SHA-256",
    toJSON: () => ["sha-256"],
    commit: (input) =>
      new Uint8Array(
        new Sha256()
          .update(input)
          .digest(),
      ),
  }),
  blake2b: () => ({
    toString: () => "Blake2b-256",
    toJSON: () => ["blake2b"],
    commit: (input) => blake2bHash(input),
  }),
};
const NETWORK_PREFIX = new Uint8Array([87, 82, 0]);
function toOperation(op) {
  if (
    !(Array.isArray(op) && op.length > 0 &&
      op.every((arg) => typeof arg == "string"))
  ) {
    throw new Error("Invalid operation");
  }
  switch (op[0]) {
    case "prepend": {
      const data = Hex.parse(op[1]);
      return Operation.prepend(data);
    }
    case "append": {
      const data = Hex.parse(op[1]);
      return Operation.append(data);
    }
    case "sha-256":
      return Operation.sha256();
    case "blake2b":
      return Operation.blake2b();
    default:
      throw new Error(`Unsupported operation "${op[0]}"`);
  }
}
export class Proof {
  static VERSION = 0;
  static parse(json) {
    const data = JSON.parse(json);
    if (!(data != undefined && typeof data == "object")) {
      throw new Error("Invalid proof format");
    }
    if (!("version" in data)) {
      throw new Error("Missing proof version");
    }
    if (!("network" in data)) {
      throw new Error("Missing network ID");
    }
    if (!("ops" in data)) {
      throw new Error("Missing operations array");
    }
    if (
      !(typeof data.version == "number" &&
        Number.isInteger(data.version) &&
        data.version > -1)
    ) {
      throw new Error("Invalid proof version");
    }
    if (!Array.isArray(data.ops)) {
      throw new Error("Ops field is not an array");
    }
    if (!(data.version <= Proof.VERSION)) {
      throw new Error(`Unsupported proof version "${data.version}"`);
    }
    return new Proof(data.network, (data.ops).map(toOperation));
  }
  constructor(network, operations) {
    if (operations.length == 0) {
      throw new Error("Empty operations array");
    }
    try {
      const rawNetwork = Base58.decodeCheck(network);
      if (rawNetwork.length != 7) {
        throw null;
      }
      if (!compare(rawNetwork.slice(0, 3), NETWORK_PREFIX)) {
        throw null;
      }
    } catch (_) {
      console.log(_)
      throw new Error("Invalid network ID");
    }
    this.network = network;
    this.operations = operations;
  }
  toJSON() {
    return {
      version: Proof.VERSION,
      network: this.network,
      ops: this.operations,
    };
  }
  derive(input) {
    const rawHash = this.operations.reduce((acc, op) => op.commit(acc), input);
    return new Block(this.network, rawHash);
  }
}
